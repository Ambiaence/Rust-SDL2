use sdl2::pixels::Color;
use sdl2::event::Event;
use sdl2::keyboard::Keycode;
use std::time::Duration;
use std::cell::RefCell;

use rustSDL::bitmap::Bitmap;

pub struct SdlTwo { 
    sdl_context: sdl2::Sdl,
    video_subsystem: sdl2::VideoSubsystem,
    canvas: RefCell<sdl2::render::Canvas<sdl2::video::Window>>,
    event_pump: RefCell<sdl2::EventPump>, 
}

impl SdlTwo {
    pub fn new() -> SdlTwo{
        //Create things on the outside and then pass ownership to SdlTwo
        let con = sdl2::init().unwrap();
        let vid = con.video().unwrap();
        let win = vid.window("rust-sdl2 demo", 800, 600)
            .position_centered()
            .build()
            .unwrap();

        let can = win.into_canvas().build().unwrap();
        let eve = con.event_pump().unwrap();

        let instance = SdlTwo {
            sdl_context: con,
            video_subsystem: vid,
            canvas: RefCell::new(can), 
            event_pump: RefCell::new(eve),
        };   
        instance
    }

    pub fn drawBitmap(&self, map: &Bitmap) { //Draws a bitmap to canvas
        let mut pos: usize = 0;
        self.canvas.borrow_mut().clear();
        for r in (0..(map.width)) {
            for c in (0..(map.height)) {
                pos = (r*map.width + c*4) as usize;
                self.canvas.borrow_mut()
                    .set_draw_color(Color::RGBA(map.components[pos + 0],
                                                map.components[pos + 1],
                                                map.components[pos + 2],
                                                map.components[pos + 3]));
                self.canvas.borrow_mut()
                    .draw_point(sdl2::rect::Point::new(r, c));

            }
        }
        self.canvas.borrow_mut().present();
    }

}
